{
  /*
	 // Place your snippets for TypeScript React here. Each snippet is defined under a snippet name and has a prefix, body and
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
  "React import": {
    "prefix": "react",
    "body": ["import * as React from \"react\";"]
  },
  "classnames import": {
    "prefix": "classnames",
    "body": ["import * as classNames from \"classnames\";"]
  },
  "React Component": {
    "prefix": "component",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface Props {",
      "  $0",
      "}",
      "",
      "export class ${1:$TM_FILENAME_BASE} extends React.PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <>",
      "        ",
      "      </>",
      "    );",
      "  }",
      "}"
    ]
  },
  "React Component (Reactstrap)": {
    "prefix": "reactstrap",
    "body": [
      "import * as React from \"react\";",
      "import {} from \"reactstrap\";",
      "",
      "export interface Props {",
      "  $0",
      "}",
      "",
      "export class ${1:$TM_FILENAME_BASE} extends React.PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <>",
      "        ",
      "      </>",
      "    );",
      "  }",
      "}"
    ]
  },
  "React Component (Material UI; Styled)": {
    "prefix": "material",
    "body": [
      "import * as React from \"react\";",
      "import { withStyles, createStyles, WithStyles } from \"@material-ui/core\";",
      "",
      "const styles = () => createStyles({});",
      "",
      "export interface Props extends WithStyles<typeof styles> {",
      "  $0",
      "}",
      "",
      "class Styled${1:$TM_FILENAME_BASE} extends React.PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <>",
      "        ",
      "      </>",
      "    );",
      "  }",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE} = withStyles(styles)(Styled${1:$TM_FILENAME_BASE});"
    ]
  },
  "React Component (Material UI; Styled; Functional; Expression-style)": {
    "prefix": "materialfunctionalexpression",
    "body": [
      "import * as React from \"react\";",
      "import { withStyles, createStyles, WithStyles } from \"@material-ui/core\";",
      "",
      "const styles = () => createStyles({});",
      "",
      "export interface Props extends WithStyles<typeof styles> {",
      "  $0",
      "}",
      "",
      "const Styled${1:$TM_FILENAME_BASE}: React.FunctionComponent<Props> = props => (",
      "  ",
      ");",
      "",
      "export const ${1:$TM_FILENAME_BASE} = withStyles(styles)(Styled${1:$TM_FILENAME_BASE});"
    ]
  },
  "React Component (Material UI; Styled; Functional; Statement-style)": {
    "prefix": "materialfunctionalstatement",
    "body": [
      "import * as React from \"react\";",
      "import { makeStyles } from \"@material-ui/core\";",
      "",
      "const useStyles = makeStyles({});",
      "",
      "export interface Props {",
      "  $0",
      "}",
      "",
      "export function ${1:$TM_FILENAME_BASE}(props: Props) {",
      "  const classes = useStyles(props);",
      "  ",
      "  return (",
      "    ",
      "  );",
      "};"
    ]
  },
  "React Component (Material UI; Unstyled)": {
    "prefix": "materialunstyled",
    "body": [
      "import * as React from \"react\";",
      "import {} from \"@material-ui/core\";",
      "",
      "export interface Props  {",
      "  $0",
      "}",
      "",
      "export class ${1:$TM_FILENAME_BASE} extends React.PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <>",
      "        ",
      "      </>",
      "    );",
      "  }",
      "}"
    ]
  },
  "React Component (pure functional; const)": {
    "prefix": "functionalconst",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface Props {",
      "  $0",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FunctionComponent<Props> = props => (",
      "  ",
      ");"
    ]
  },
  "React Component (pure functional; function)": {
    "prefix": "functionalfunction",
    "body": [
      "import * as React from \"react\";",
      "",
      "export interface Props {",
      "  $0",
      "}",
      "",
      "export function ${1:$TM_FILENAME_BASE}(props: Props) {",
      "  return (",
      "    ",
      "  );",
      "};"
    ]
  },
  // "React Component (connected, simple)": {
  //   "prefix": "rcompconnected",
  //   "body": [
  //     "import * as React from 'react';",
  //     "import * as classNames from 'classnames';",
  //     "import { connect } from 'react-redux';",
  //     "",
  //     "interface OwnProps {",
  //     "  $0",
  //     "}",
  //     "",
  //     "interface ConnectedProps {",
  //     "  ",
  //     "}",
  //     "",
  //     "class ${1:$TM_FILENAME_BASE}Class extends React.PureComponent<OwnProps & ConnectedProps, {}> {",
  //     "  render() {",
  //     "    return (",
  //     "      <div className={classNames('component')}>",
  //     "        ",
  //     "      </div>",
  //     "    );",
  //     "  }",
  //     "}",
  //     "",
  //     "function mapStateToProps(state: ${2:RootState}): ConnectedProps {",
  //     "  return {",
  //     "  ",
  //     "  };",
  //     "}",
  //     "",
  //     "export $1 = connect(mapStateToProps)($1Class) as React.ComponentClass<OwnProps>;"
  //   ]
  // },
  // "React Component (connected, complete)": {
  //   "prefix": "rcompconnectedfull",
  //   "body": [
  //     "import * as React from 'react';",
  //     "import * as classNames from 'classnames';",
  //     "import { Dispatch, bindActionCreators } from 'redux';",
  //     "import { connect } from 'react-redux';",
  //     "",
  //     "interface OwnProps {",
  //     "  $0",
  //     "}",
  //     "",
  //     "interface ConnectedProps {",
  //     "  ",
  //     "}",
  //     "",
  //     "interface DispatchProps {",
  //     "  ",
  //     "}",
  //     "",
  //     "class ${1:$TM_FILENAME_BASE}Class extends React.PureComponent<OwnProps & ConnectedProps & DispatchProps, {}> {",
  //     "  render() {",
  //     "    return (",
  //     "      <div className={classNames('component')}>",
  //     "        ",
  //     "      </div>",
  //     "    );",
  //     "  }",
  //     "}",
  //     "",
  //     "function mapStateToProps(state: ${2:RootState}): ConnectedProps {",
  //     "  return {",
  //     "  ",
  //     "  };",
  //     "}",
  //     "",
  //     "function mapDispatchToProps(dispatch: Dispatch<$2>): DispatchProps {",
  //     "  return bindActionCreators({}, dispatch);",
  //     "}",
  //     "",
  //     "export const $1 = connect(mapStateToProps, mapDispatchToProps)($1Class) as React.ComponentClass<OwnProps>;"
  //   ]
  // },
  // "mapStateToProps": {
  //   "prefix": "mapstatetoprops",
  //   "body": [
  //     "interface ConnectedProps {",
  //     "  ",
  //     "}",
  //     "",
  //     "function mapStateToProps(state: ${2:RootState}): ConnectedProps {",
  //     "  return {",
  //     "  ",
  //     "  };",
  //     "}",
  //     ""
  //   ]
  // },
  // "mapDispatchToProps": {
  //   "prefix": "mapdispatchtoprops",
  //   "body": [
  //     "import { Dispatch, bindActionCreators } from 'redux';",
  //     "$0",
  //     "interface DispatchProps {",
  //     "  ",
  //     "}",
  //     "",
  //     "function mapDispatchToProps(dispatch: Dispatch<RootState>): DispatchProps {",
  //     "  return bindActionCreators({ }, dispatch);",
  //     "}"
  //   ]
  // },
  // "react-redux connect + cast": {
  //   "prefix": "connect",
  //   "body": [
  //     "import { connect } from 'react-redux';",
  //     "",
  //     "export const ${1:$TM_FILENAME_BASE} = connect(mapStateToProps, mapDispatchToProps)($1Class) as React.ComponentClass<OwnProps>;"
  //   ]
  // },
  "Inline Handler": {
    "prefix": "inline",
    "body": ["${1:e} => { ${3:this.setState({ $2 \\});} \\}"]
  },
  "Prop": {
    "prefix": "p",
    "body": ["${1}={${2}}"]
  },
  "State Initializer": {
    "prefix": "state",
    "body": ["state: State = { $0 };"]
  }
}
